////////////////////////////////////////
/*
	=== GLOBAL SCRIPT DEFINING ===
*/
////////////////////////////////////////

// Interaction related code

#define ACS_INTR_SHOPEXITTRIG       200
#define ACS_INTR_GRANTLOOT          201

// Attacks related code

#define MONSTER_SETSPEED            300
#define MONSTER_LIGHTNINGATTACK     301
#define MONSTER_RANDDROP            302
 
#define WEAPON_ECTOPLASM            350

// Player related code

#define ACS_PLYR_ENTER              400
#define ACS_PLYR_RESPAWN            401
#define ACS_PLYR_REENTER            402
#define ACS_PLYR_DEATH              403
#define ACS_PLYR_RESETVAR           404
#define ACS_PLYR_DISCNCT            405

#define ACS_PLYR_MONEYLOOP          406
#define ACS_PLYR_MONEYEFFECT        407
#define ACS_PLYR_LEVELLOOP          408

#define ACS_PLYR_INVSPECIALS        409
#define ACS_PLYR_PETLOOP            410
#define ACS_PLYR_STARTMUSIC         411
#define ACS_PLYR_RETURNOLDINVENTORY 412
#define ACS_PLYR_SAVEINVENTORY      413
#define ACS_PLYR_CBOWAMMO           414

// Database related code

#define ACS_DBASE_ENTER             500
#define ACS_DBASE_LOGDATA           501
#define ACS_DBASE_DISTRDATA         502

// World related code
// - Reminder: Scripts 700-710, & 800-830 are used for the chosen one.

#define ACS_WRLD_CREATESHOPITMS     750
#define ACS_WRLD_CREATELEVELS       751
#define ACS_WRLD_EXITLOOP           752
#define ACS_WRLD_SHOPEXITTIME       753
#define ACS_WRLD_SHOPEXITVOTE       754
#define ACS_WRLD_DEFINELOOTTABLES   755
#define ACS_WRLD_CVARCHECKER        756
#define ACS_WRLD_MUSICPLAYER        757

// Darkness level code
#define ACS_DLVL_MAIN               851
#define ACS_DLBL_SET                852
#define ACS_DLBL_SEC                853
#define ACS_DLBL_HALT               854

#define ACS_ADMIN_PLAYERPET         904
#define ACS_ADMN_CHANGEMUSIC        920

////////////////////////////////////////
/*
	=== DEFINITIONS ===
*/
////////////////////////////////////////

#define MAXPLAYERS              100 
#define PLAYERTIDBASE           10000
#define SELF                    0
#define NONE                    0
#define PLAYERMONEY             0    

#define SEC                     35


// [#] Need to check TID bases all around the lib for next year.
#define PLAYERMARINETIDBASE		15000

#define JUSTLEFT_MONEYSYSTEM    0

// -- Shop defines --

#define SHOPMAP_NUM             00
#define SHOP_EXITVOTE_CNTDWN    30  // in seconds
#define SHOP_MAXTIME            900 // in seconds

#define EXIT_LINE_ID            100

////////////////////////////////////////
/*
	=== HUDMESSAGE CHANNELS ===
*/
////////////////////////////////////////

#include "halloween_channels.acs"

////////////////////////////////////////
/*
	=== GLOBAL VARIABLES ===
*/
////////////////////////////////////////
							
#define DATASIZE 	        15

global int 1:DataNames[];
global int 2:DataIndex;
global int 3:Data[];

#define MONEYDATA           15
#define PETDATA             14
#define LEVELDATA           13
#define ADMINDATA           12
#define MARINEHEALTHDATA	11
#define MARINESPEEDDATA		10
#define MARINEWEAPONDATA	9
#define MARINESKINDATA		8
#define MARINEDAMAGEDATA	7
#define MARINECOLORDATA		6

global int 4:InvData[];

int player_exit[MAXPLAYERS];
//bool hadFirstSpawn[MAXPLAYERS];
int total_player_exit = 0;
int percentage = 70;

global int 10:gExit;
global int 11:gSavedata;

// For the FWeapQuietus assembly message
global int 12:tmpSworddata[];

// For the CWeapWraithverge assembly message
global int 13:tmpSoulhunterdata[];

// Custom gamemode?
global bool 15:customGamemode;
global bool 16:inventorySaved[];

// Music override?
global bool 17:stopMusicbox;

global bool 20:gbossFightUnlocked;

////////////////////////////////////////
/*
	=== GLOBAL STRING VARIABLES ===
*/
////////////////////////////////////////

#include "halloween_globalstringlist.acs"

////////////////////////////////////////
/*
	=== GLOBAL INCLUDES ===
*/
////////////////////////////////////////

// The order is important here.

#include "zdaemon.acs"
#include "halloween_playercode.acs"
#include "halloween_ectoplasm.acs"
#include "halloween_levels.acs"
#include "halloween_database.acs"
#include "halloween_loot.acs"

#include "halloween_shops.acs"
#include "halloween_pets.acs"
#include "halloween_scriptedmarines.acs"
#include "halloween_admin.acs" 
#include "halloween_dehackedcoupler.acs"

#include "halloween_dlevel.acs"  

////////////////////////////////////////
/*
	=== GLOBAL FUNCTIONS ===
*/
////////////////////////////////////////

function int PlayerTag(int player)
{
	return (player+PLAYERTIDBASE);
}

function bool PlayerAlive(int player)
{
	// Note: disconnected players always return 0 health.
	return (GetActorProperty(PlayerTag(player), APROP_Health) > 0);
}

function int GetDistance (int x1, int y1, int x2, int y2)
{
	int len;
	int x = x1 - x2;
	int y = y1 - y2;

	int ang = vectorangle(x,y);                    

	if(((ang+0.125)%0.5) > 0.25) len = fixeddiv(y, sin(ang));
	else len = fixeddiv(x, cos(ang));

	return len >> 16;
}

function int Distance(int object1, int object2)
{
	return ((abs(GetActorX(object1)-GetActorX(object2))>>16) +
			(abs(GetActorY(object1)-GetActorY(object2))>>16));
}

function bool strcomp (str str1, str str2)
{
	int len = strlen(str1);
	bool match = true;
	
	int i = 0;

	while (i < len && match)
	{
		int c1 = getchar(str1, i);
		int c2 = getchar(str2, i);
		
		if (c1 != c2)
			match = false;
		
		i++;
	}	
	return match;
}

function int abs(int x)
{
	if (x<0) return -x;
	return x;
}

function bool IsClose(int object1, int object2, int maxradius)
{
	return ( abs(GetActorX(object1)-GetActorX(object2))>>16 <= maxradius &&
			 abs(GetActorY(object1)-GetActorY(object2))>>16 <= maxradius  );
}

// A hack that checks if a sector exists.
function bool SectorExists(int tag)
{
	return (GetSectorLightLevel(tag) != -1);
}

function void DisplayShopTimeLeft(int time)
{
	log(d:time, s:" seconds until the exit is open to voting..");
	HudMessage(s:"\cj", d:time, s:" seconds until the exit is open to voting.."; 
	HUDMSG_FADEINOUT, CHNL_ANNOUNCE2, CR_RED, 0.5, 0.25, 3.0, 0.2, 0.2);
}

function int GetVelocity (int id)
{
	int len;
	int x = getactorvelx(id);
	int y = getactorvely(id);
	int z = getactorvelz(id);

	int ang = vectorangle(x,y);

	if(((ang+0.125)%0.5) > 0.25) 
		len = fixeddiv(y, sin(ang));
	else 
		len = fixeddiv(x, cos(ang));

	ang = vectorangle(len, z);
	
	if(((ang+0.125)%0.5) > 0.25) 
		len = fixeddiv(z, sin(ang));
	else 
		len = fixeddiv(len, cos(ang));

	return len;
}

function int GetHeightDifference(int tid1, int tid2)
{
	int height_diff;

	height_diff = GetActorZ(tid1) - GetActorZ(tid2);
	height_diff=-height_diff; //negative to positive

	return height_diff >> 16; //convert to map units
}

#define INVENTORYDATASIZE MAX_INV_ITEM_NAMES

function void SavePlayerFullInventory(int player)
{
	// Loading data
	str msg = StrParam(n:player+1);
	int slot = DataSlot(msg);
	
	if (slot != -1)
	{
		if(GetCvar("sv_debugmode") > 0) Log(s:"Saving inventory items for: ", n:player+1, s:"!");   
		 
		if(PlayerAlive(player) || PlayerInGame(player))
		{
			for(int i = 0; i <  MAX_INV_ITEM_NAMES+1; i++) 
			{
				if(CheckInventoryCustom(player, inv_item_names[i]))
					InvData[(INVENTORYDATASIZE*(slot+1))-i] = CheckInventoryCustom(player, inv_item_names[i]);       
			}
		}
	}
}

function void RetrievePlayerFullInventory(int player)
{
	// Loading data
	str msg = StrParam(n:player+1);
	int slot = DataSlot(msg);
	
	if (slot != -1)
	{       
		if(GetCvar("sv_debugmode") > 0) Log(s:"Returning inventory items for: ", n:player+1, s:"!"); 
		
		if(PlayerAlive(player) || PlayerInGame(player))
		{
			for(int i = 0; i <  MAX_INV_ITEM_NAMES+1; i++) 
			{
				if(InvData[(INVENTORYDATASIZE*(slot+1))-i] != 0)
					ProvideInventoryCustom(PlayerTag(player), inv_item_names[i], InvData[(INVENTORYDATASIZE*(slot+1))-i]);       
			}
		}
	}
}

// This function makes sure that you have at least a certain
// number of inventory items. Say, if a player has 10 shells and
// you 'provide' them 40 shells they will receive 30 shells.
// If they already have at least 40, nothing is given.
function void ProvideInventoryCustom(int player, str itemclass, int needs)
{
	SetActivator(PlayerTag(player));
	int has = CheckInventory(itemclass);
	if (has < needs)
	{
		if (itemclass == "Armor") itemclass = "ArmorBonus"; // hack
		if (itemclass == "Health") itemclass = "HealthBonus"; // another hack
		GiveInventory(itemclass, needs-has);
	}
}

function int CheckInventoryCustom(int player, str itemclass)
{
	SetActivator(PlayerTag(player));

    if (itemclass == "Armor") itemclass = "ArmorBonus"; // hack
    if (itemclass == "Health") itemclass = "HealthBonus"; // another hack
    
	int has = CheckInventory(itemclass);
    return has;

}

////////////////////////////////////////
/*
	=== GLOBAL SCRIPTS ===
*/
////////////////////////////////////////

// Shop exit voting trigger

script ACS_INTR_SHOPEXITTRIG (void)
{
	int player = PlayerNumber();

	if(player_exit[player] != 1
		&& !gbossFightUnlocked)
	{
		Log(n:0, s:" wants to exit the map.");
		player_exit[player] = 1;
		total_player_exit++;
	}

	delay(1*SEC);
} 

// Exit checker
script ACS_WRLD_EXITLOOP open
{
	delay(1);
	SetFont("GARGWING");

	// Wait for the exit to be triggered.
	while(gExit != true)
		delay(1);

	if (GetCVar("sv_nocountdown") != 1)
	{
		for (int i=5; i > 0; i--)
		{
			HudMessageBold(s:"\cdMap will end in: \cj", d:i, s:" ..";
			0, CHNL_ANNOUNCE1, CR_GOLD, 0.50, 0.15, 2.0); 
			delay(SEC); 
		}
	}
	
	// Right, now give a sign to save data.
	if(!customGamemode)
		gSavedata = true;
	 
	delay(10);
	gExit = false;
	gSavedata = false;
	stopMusicbox = false;
	customGamemode = false;  
	delay(1);
	Exit_Normal(0);
}

Script ACS_WRLD_SHOPEXITTIME open
{
	delay(1);
	int shoptime = 180;
	SetFont("GARGWING");

	if ( getlevelinfo ( LEVELINFO_LEVELNUM ) == SHOPMAP_NUM )
	{
		if(GetCvar("sv_shoptime") > SHOP_EXITVOTE_CNTDWN && GetCvar("sv_shoptime") <= SHOP_MAXTIME)
			shoptime = GetCvar("sv_shoptime");

		for (int i = shoptime; i > 0; i--)
		{
			if(gExit)
				break;
			
			if(gbossFightUnlocked)
				break;

			HudMessageBold(s:"\cdTime left: \cj", d:i/60, s:" : ", d:(i%60)/10, d:i%10, s:" ..";
			0, CHNL_ANNOUNCE1, CR_GOLD, 0.50, 0.15, 2.0); 
			delay(1*SEC);
		}
		delay(1);
		
		if(!gbossFightUnlocked)
			gExit = true;
		
	}
}

script ACS_WRLD_SHOPEXITVOTE open
{
	delay(1);
	SetFont("GARGWING");

	if ( getlevelinfo ( LEVELINFO_LEVELNUM ) == SHOPMAP_NUM )
	{
		for (int i=SHOP_EXITVOTE_CNTDWN; i > 0; i--)
		{
			if (gbossFightUnlocked)
				break;
			
			if(i == 30)
				DisplayShopTimeLeft(i);

			if(i == 15)
				DisplayShopTimeLeft(i);

			if(i == 5)
				DisplayShopTimeLeft(i);

			if(i == 1)
			{
				SetLineBlocking(EXIT_LINE_ID, OFF);
				//SetLineSpecial (EXIT_LINE_ID, ACS_Execute, ACS_INTR_SHOPEXITTRIG);
				SetLineTexture(101, SIDE_FRONT, TEXTURE_MIDDLE, "EXTAL2");
				SetLineTexture(101, SIDE_BACK, TEXTURE_MIDDLE, "EXTAL2"); 
				HudMessageBold(s:"\cdExit is open, you may now vote!"; 
				HUDMSG_FADEINOUT, CHNL_ANNOUNCE2, CR_RED, 0.5, 0.25, 3.0, 0.2, 0.2);
				log(s:"\cdExit is open, you may now vote!");
				AmbientSound("misc/exitopen", 127);
			}
		delay(SEC);
		}

		while (!gExit && !gbossFightUnlocked)
		{
			if(PlayerCount() != 0)
			{
				if(total_player_exit == PlayerCount())
				{
					HudMessageBold(s:"\cdOnly one player present, exiting.."; 
					HUDMSG_FADEINOUT, CHNL_ANNOUNCE2, CR_RED, 0.5, 0.25, 3.0, 0.2, 0.2);
					Log(s:"\cdOnly one player present, exiting..");
					gExit = true;
				}
				else if(PlayerCount() > 1 && total_player_exit >= PlayerCount() * percentage / 100)
				{
					HudMessageBold(s:"\cdAtleast \cj",d:percentage, s:"% \cdof the players ready!\n\cdWill now exit!"; 
						HUDMSG_FADEINOUT, CHNL_ANNOUNCE2, CR_RED, 0.5, 0.25, 3.0, 0.2, 0.2);

					Log(s:"\cdAtleast \cj",d:percentage, s:"% \cdof the players ready!\n\cdWill now exit!");
					gExit = true;
				}
			}
			Delay(1);
		}
		
		if (gbossFightUnlocked)
		{
			SetLineBlocking(EXIT_LINE_ID, OFF);
			//SetLineSpecial (EXIT_LINE_ID, ACS_Execute, ACS_INTR_SHOPEXITTRIG);
			SetLineTexture(101, SIDE_FRONT, TEXTURE_MIDDLE, "EXTAL1");
			SetLineTexture(101, SIDE_BACK, TEXTURE_MIDDLE, "EXTAL1"); 
			//HudMessageBold(s:"\cdExit is open, you may now vote!"; 
			//HUDMSG_FADEINOUT, CHNL_ANNOUNCE2, CR_RED, 0.5, 0.25, 3.0, 0.2, 0.2);
			//log(s:"\cdExit is open, you may now vote!");
			//AmbientSound("misc/exitopen", 127);
		}
	}
}

script ACS_WRLD_CVARCHECKER open
{
	delay(1);
	
	//if(GetCvar("maxlives") > 0 && !GetCvar("sv_multiplelives"))
	//    Log(s:"[WARNING] MAXLIVES IS MORE THAN 0, YOU HAVE TO SET SV_MULTIPLELIVES TO TRUE!");
	
	while(true)
	{
		if(GetCvar("sv_moneyrate") > 0 && GetCvar("sv_moneyrate") <= 100)
			moneyrate = GetCvar("sv_moneyrate");
			
		if(GetCvar("sv_exitplayerpercentage") > 0 && GetCvar("sv_exitplayerpercentage") <= 90)
			percentage = GetCvar("sv_exitplayerpercentage");
		
		delay(10);
	}
} 

script "ResetGlobals" open
{
	customGamemode = false;
}
   
////////////////////////////////////////
/*
		 === MUSIC PLAYER ===
*/
////////////////////////////////////////


#define MAXTRACKS 16+1	// 1 more than MUSXX

str all_music[MAXTRACKS] = {"MUS00", 
 "MUS01", "MUS02", "MUS03", "MUS04", "MUS05", 
 "MUS06", "MUS07", "MUS08", "MUS09", "MUS10", 
 "MUS11", "MUS12", "MUS13", "MUS14", "MUS15",
 "MUS16"};

int randmus;


// manual music change
script ACS_ADMN_CHANGEMUSIC (int track)
{
	if ((track > 0) && (track < MAXTRACKS))
	{
		SetMusic(all_music[0], 0);
		Delay(35);
		SetMusic(all_music[track], 0);
	}
	else
		PrintBold(s:"DJ is a noob!");
}

//new music each map
script ACS_WRLD_MUSICPLAYER open
{
	SetMusic(all_music[0], 0);
	Delay(2*SEC);
	
	if(!stopMusicbox) // Check whether we should play music.
	{
		randmus = ZD_rand(2, MAXTRACKS);                // Don't play MUS00
		if (!randmus) randmus = Random(2, MAXTRACKS);   // Non ZDaemon engines
		SetMusic(all_music[randmus - 1], 0);
	}
}


//set music for entering players
script ACS_PLYR_STARTMUSIC (void)
{
	Delay(3 * SEC);

	if(!stopMusicbox)
		SetMusic(all_music[randmus - 1], 0);
}

////////////////////////////////////////
/*
	=== SHOP MAP RELATED CODE ===
*/
////////////////////////////////////////

// Ectoplasm fountain
script 207 enter
{
	int player = PlayerNumber();
	
	if ( getlevelinfo ( LEVELINFO_LEVELNUM ) == SHOPMAP_NUM)
	{
		while(gExit != true)
		{
			if(Distance(PlayerTag(player), 77) < 500)
			{
				GiveMoney(player, 10);
				Delay(2*SEC);
			}
			Delay(1);
		}
	}
}

int cur_adminpet = 0;

script 208 (void)
{
	int player = PlayerNumber();

	// Loading data
	str msg = StrParam(n:PlayerNumber()+1);
	int slot = DataSlot(msg);
	
	int place = DataSlot(msg);

	// check player slot within the database.
	if (slot != -1)
	{
		Data[(DATASIZE*(place+1))-PETDATA] = cur_adminpet;
	}
}

script 209 (void)
{
	if(cur_adminpet < MAX_VARIETY_PETS-1)
		cur_adminpet++; 
	else
		cur_adminpet = 0;
		
	print(s:"current pet: ", d:cur_adminpet, s:" - ", s:AvailablePets[cur_adminpet]);
}

script 210 (int tid)
{
	int player = PlayerNumber();
	int rand_amount = zd_rand(400, 800);

	SetFont("GARGWING");

	GiveMoney(player, rand_amount);
	Thing_Activate(tid);

	HudMessageBold(s:"\cd", n:player+1, s:"\cj just handed in their \cdDiamond!\n\cjEveryone received a bit of Ectoplasm!"; 
	HUDMSG_FADEINOUT, CHNL_ANNOUNCE2, CR_RED, 1.5, 0.25, 4.0, 0.2, 0.2);

	for(int i = 0; i < PlayerTopIndex()+1; i++)
	{
		if(PlayerInGame(i) && i != player)
			GiveMoney(i, rand_amount/2);
	}

}

script 211 (int tid)
{
	int player = PlayerNumber();
	int rand_amount = zd_rand(200, 400);

	SetFont("GARGWING");

	GiveMoney(player, rand_amount);
	Thing_Activate(tid);

	HudMessageBold(s:"\cd", n:player+1, s:"\cj just handed a \cdBook!\n\cjEveryone received a bit of Ectoplasm!"; 
	HUDMSG_FADEINOUT, CHNL_ANNOUNCE2, CR_RED, 1.5, 0.25, 4.0, 0.2, 0.2);

	for(int i = 0; i < PlayerTopIndex()+1; i++)
	{
		if(PlayerInGame(i) && i != player)           
			GiveMoney(i, rand_amount/2);        
	}

}

//script 211 (int tid)
//
//	Thing_Activate(tid);
//}

script 212 (void)
{
	int player = PlayerNumber();

	if(GetDiscount(player) < 100)
		SetDiscount(player, GetDiscount(player)+1);
	else
		SetDiscount(player, 0);
}

script 213 (int tid)
{
	int player = PlayerNumber();
	int rand_amount = zd_rand(600, 1000);

	SetFont("GARGWING");

	GiveMoney(player, rand_amount);
	Thing_Activate(tid);

	HudMessageBold(s:"\cd", n:player+1, s:"\cj just handed in \cdA SKULL!\n\cjEveryone received a bit of Ectoplasm!"; 
	HUDMSG_FADEINOUT, CHNL_ANNOUNCE2, CR_RED, 1.5, 0.25, 4.0, 0.2, 0.2);

	for(int i = 0; i < PlayerTopIndex()+1; i++)
	{
		if(PlayerInGame(i) && i != player)           
			GiveMoney(i, rand_amount/2);        
	}

}

/*

333 <=> PuzzGear1
334 <=> PuzzGear2
335 <=> PuzzGear3
336 <=> PuzzGear4

*/
 
script 214 (void)
{
	int player = PlayerNumber();
	int rand_amount = zd_rand(5000, 10000);

	SetFont("GARGWING");

	If(!CheckInventory("PuzzGear1") &&  !CheckInventory("PuzzGear2") && !CheckInventory("PuzzGear3") && !CheckInventory("PuzzGear4"))  
	{
		SetActorProperty (PlayerTag(player), APROP_Speed, 0.0);

		HudMessage(s:"\cjKing: \n\cjYou know what grinds my gears?";
		HUDMSG_FADEINOUT, CHNL_INTERACT1, CR_WHITE, 1.50, 0.40, 3.0, 0.2, 0.2);

		Delay(3*SEC);

		HudMessage(s:"\cjKing: \n\cjHaving all the Hexen puzzle item gears!";
		HUDMSG_FADEINOUT, CHNL_INTERACT1, CR_WHITE, 1.50, 0.40, 3.0, 0.2, 0.2);

		Delay(3*SEC);

		HudMessage(s:"\cjKing: \n\cjSo you're going to get them for me & I'll reward you!";
		HUDMSG_FADEINOUT, CHNL_INTERACT1, CR_WHITE, 1.50, 0.40, 3.0, 0.2, 0.2);

		SetActorProperty (PlayerTag(player), APROP_Speed, 1.0);
	}
	else
	{

		HudMessage(s:"\cjKing: \n\cjOh my lord! All the gears! *geargasm*";
		HUDMSG_FADEINOUT, CHNL_INTERACT1, CR_WHITE, 1.50, 0.40, 3.0, 0.2, 0.2);

		GiveMoney(player, rand_amount);

		HudMessageBold(s:"\cd", n:player+1, s:"\cj just handed in \cdALL THE GEARS!\n\cjEveryone received a bit of Ectoplasm!"; 
		HUDMSG_FADEINOUT, CHNL_ANNOUNCE2, CR_RED, 1.5, 0.25, 4.0, 0.2, 0.2);
		AmbientSound("PuzzleSuccess", 127);
		
		TakeInventory("PuzzGear1", 1);
		TakeInventory("PuzzGear2", 1);
		TakeInventory("PuzzGear3", 1);
		TakeInventory("PuzzGear4", 1);

		int discount = 25;

		Log(s:"Discount of ", d:discount, s:"% set for ", n:player+1);
		SetDiscount(player, discount);

		for(int i = 0; i < PlayerTopIndex()+1; i++)
		{
			if(PlayerInGame(i) && i != player)           
			 GiveMoney(i, rand_amount/2);        
		}
	}

}


script 215 (void)
{
	SetFont("GARGWING");

	HudMessage(s:"\cjDark Messenger: \n\cjThe books you find, please put them in the bookcases!";
	HUDMSG_FADEINOUT, CHNL_INTERACT1, CR_WHITE, 1.50, 0.40, 3.0, 0.2, 0.2);
}

// [ADMIN CRIB CHECKER]

Script 216 (int angle)
{
	int player = PlayerNumber();

	// Loading data
	str msg = StrParam(n:PlayerNumber()+1);
	int slot = DataSlot(msg);

	int place = DataSlot(msg);

	// check player slot
	if (slot != -1)
	{
		SetFont("GARGWING");

		If(Data[(DATASIZE*(slot+1))-ADMINDATA] == 1)
		{
			HudMessage(s:"\cdWelcome to the admin crib!";
			HUDMSG_FADEINOUT, CHNL_INTERACT1, CR_GOLD, 0.50, 0.40, 2.0, 0.5, 0.5);
		}
		else
		{
			//ThrustThing(angle, 32, 0, 0);
			Thing_Move (PlayerTag(player), 16, 0);
			HudMessage(s:"\caGo away, You are not an admin!";
			HUDMSG_FADEINOUT, CHNL_INTERACT1, CR_RED, 0.50, 0.40, 2.0, 0.5, 0.5);
		}
	}
}

int cur_player = 0;

script 217 (void)
{

	if(cur_player <= PlayerTopIndex())
		cur_player++;
	else
		cur_player = 0;

	print(s:"current player selected: ", n:cur_player+1);       

}

script 218 (int args1)
{
	int player = PlayerNumber();

	SetFont("GARGWING");

	if(GetCvar("sv_allowplayerpet") && args1)
	{
		ACS_Execute(ACS_ADMIN_PLAYERPET, 0, player, cur_player);
		AmbientSound("misc/muhaha", 127);
		HudMessageBold(s:"\cj", n:cur_player+1, s:" \cahas been set as ", n:player+1, s:" his pet!"; 
		HUDMSG_FADEINOUT, CHNL_ANNOUNCE2, CR_RED, 1.5, 0.25, 4.0, 0.2, 0.2);
	}
	else
	{
		ACS_Terminate(ACS_ADMIN_PLAYERPET, 0);
	}
}

script 219 (void)
{

	SetFont("GARGWING");

	Thing_Move (PlayerTag(cur_player), 19, 0);
	AmbientSound("misc/muhaha", 127);
	HudMessageBold(s:"\cj", n:cur_player+1, s:" \cahas been jailed by the admins for 60 seconds!"; 
	HUDMSG_FADEINOUT, CHNL_ANNOUNCE2, CR_RED, 1.5, 0.25, 4.0, 0.2, 0.2);
	ACS_ExecuteAlways(220, 0, cur_player, 1);

}

// Countdown teleport, do not puke.

script 220 (int player, int time)
{
int countdown = time*60;

	while(countdown != 0)
	{
		Delay(SEC);
		countdown--;
	} 
	Thing_move(PlayerTag(player), 16, 1);
}

int curScriptedMarineSkin[MAXPLAYERS];
int curScriptedMarineWeapon[MAXPLAYERS];

// Map based example of to-purchase marine.
script 221 (int args1)
{
	int player = PlayerNumber();
	SetFont("GARGWING");
	
	if (args1 == 0)
	{
		if (curScriptedMarineSkin[player] >= ZD_GetSkinTopIndex())
			curScriptedMarineSkin[player] = 0;
		else
			curScriptedMarineSkin[player]++;
		
		Print(s:"\cdMarine skin changed to: \cj ", d:curScriptedMarineSkin[player], s:" - ", s:ZD_GetSkinName(curScriptedMarineSkin[player]));
	}
	
	if (args1 == 1)
	{
		if (curScriptedMarineSkin[player] <= 0)
			curScriptedMarineSkin[player] = ZD_GetSkinTopIndex();
		else
			curScriptedMarineSkin[player]--;
		
		Print(s:"\cdMarine skin changed to: \cj ", d:curScriptedMarineSkin[player], s:" - ", s:ZD_GetSkinName(curScriptedMarineSkin[player]));
	}
	
	if (args1 == 2)
	{
		if (curScriptedMarineWeapon[player] >= MAXMARINEWEAPONS)
			curScriptedMarineWeapon[player] = 0;
		else
			curScriptedMarineWeapon[player]++;
		
		Print(s:"\cdMarine weapon changed to: \cj ", d:curScriptedMarineWeapon[player], s:MarineWeapons[curScriptedMarineWeapon[player]]);;
	}
		
	// Client sidedly update marine with correct skin.
	Client_Execute(0, 222, 0); 
	
}

// Client-sided script, do not call.
script 222 (void)
{
	int player = PlayerNumber();
	ZD_SetMarineSkin(22, ZD_GetSkinName(curScriptedMarineSkin[player]));
}  
  
////////////////////////////////////////
/*
	=== DOOMX LUMP EXIT SCRIPT ===
*/
////////////////////////////////////////  

script 244 (void)
{
	int player = PlayerNumber();
	
	if (!gExit)
	{
		Log(n:player+1, s:" found the exit!");
		gExit = true;
	}
}

script 243 (void)
{
	int player = PlayerNumber();
	
	if (!gExit)
	{
		Log(n:player+1, s:" found the exit!");
		gExit = true;
	}
}




