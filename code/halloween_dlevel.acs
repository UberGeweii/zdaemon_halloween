////////////////////////////////////////
/*
    === DLEVEL by AF-Domains.net ===
    For Halloween ZDS 2021
*/  
////////////////////////////////////////

#define MIN_VAL                 20
#define MAX_VAL                 255
#define UL_ADD                  50
#define DEF_LL                  40
#define DEF_UL                  (DEF_LL+UL_ADD)
#define RAND_UPD_INTV           512
#define SECBREAK                65536
#define DEFMINSECTOR            160
#define SECMULT                 3
#define DEFENDSECTOR            (DEFMINSECTOR*SECMULT)
#define MINLIGHTLEVEL           31
#define INTLIGHTLEVEL           63
#define MIDLIGHTLEVEL           95
#define GIBLIGHTLEVEL           127

int endsec          = SECBREAK;
int gdl             = DEF_LL;
int dark_set        = 0;
int running         = 0;
int process_running = 0;
int bring_down      = 0;

function bool PlayersPresent(void)
{
	int i;
	
	for (i=0; i<PlayerTopIndex()+1; i++)
	{
		if (PlayerInGame(i))
			return true;
	}
	return false;
}

function int dark_constraints(int n)
{
	int dl;
	
	if (GetCvar("sv_randdl"))
	{
		int ll = n;
		if (ll < MIN_VAL)      ll = DEF_LL;
		else if (ll > MAX_VAL) ll = MAX_VAL;
		int ul = GetCvar("sv_dl_ul");
		if (ul < MIN_VAL)      ul = DEF_UL;
		else if (ul > MAX_VAL) ul = MAX_VAL;
		if (ll>=ul)
		{
			//Log(s:"!sv_dl is equal to or above sv_dl_ul.");
			if (ll>(MAX_VAL-UL_ADD))
			{
				//Log(s:"!sv_dl is set to a value of ", d:ll, s:", this breaches the upper constraint of ", d:MAX_VAL, s:" with a default sv_dl_ul of sv_dl+", d:UL_ADD, s:" ; setting to ", d:DEF_LL, s:" internally.");
				ll = DEF_LL;
			}
			ul = (ll+UL_ADD);
			//Log(s:"!using a default of ", d:ll, s:" and ", d:ul, s:" respectively. Please check your settings.");
		}
		dl = Random(ll, ul);
	}
	else
	{
		dl = n;
		if (dl < MIN_VAL)      dl = DEF_LL;
		else if (dl > MAX_VAL) dl = MAX_VAL;
	}
	
	return dl;
}

function void dark_state(int j)
{
	if (j==0)               dark_set = 0;
	if (j<3)
	{
		if (running==1)         running = 2;
		if (j==2)
		{
			if (process_running==1) process_running = 2;
		}
	}
	else if (j==3)
	{
		running = 0;
		process_running = 0;
	}
	if (j>=1)               endsec = SECBREAK;
}

function int is_enabled(int dummy)
{
	int en = GetCvar("sv_dl_enabled");
	if (en!=0)
	{
		if (process_running==0)
			process_running = -1;
		return 1;
	}
	
	if (process_running>0)
	{
		dark_state(1);
		bring_down = 1;
	}
	return 0;
}

function int set_darkness(int reset)
{
	int dl = dark_constraints(GetCvar("sv_dl"));
	
	if (reset>0)
	{
		dark_state(0);
	}
	
	return dl;
}

function int Sector_SetColor_Z(int sector, int baselight, int r, int g, int b)
{
	int n;
	int dlm = GetCvar("sv_dl_mode");
	
	if (dlm==0 || dlm==2)
	{
		// Strictly speaking this check isn't needed, 
		// however it's to avoid calling Sector_SetColor redundantly.
		n = baselight;
		if (n<0) return 1;
		if (dlm==2)
		{
			if (GetCvar("sv_ll_ex255")==1)
				return 1;
		}
		
		//Log(s:"SetColor (", d:sector, s:") (", d:r, s:" ", d:g, s:" ", d:b, s:" ", d:desat, s:")");
		return Sector_SetColor(sector, r, g, b, 0);
	}
	return 1;
}

function int light_constraints(int n)
{
	int ll;
	
	ll = n;
	if (ll < 1)       ll = 1;
	else if (ll > 24) ll = 24;
	
	return ll;
}

function int Sector_SetLight_Z(int sector, int baselight, int inc, int nonp)
{
	int j, k, l1, l2, n, dv, v, mult;
	int dlm = GetCvar("sv_dl_mode");
	int ex255 = GetCvar("sv_ll_ex255");
	
	if (dlm==1 || dlm==2 || nonp==1)
	{
		j = light_constraints(GetCvar("sv_ll_var"));
		
		l1 = 10;
		if (nonp==1) l2 = inc;
		else         l2 = inc+1;
		l1 = l1 - l2;
		n  = baselight;
		if (n>=0)
		{
			if (ex255==1 && n==255)
			{
				dv = (136 - j);
				n  = dv;
				v  = n;
				if (l2<=5)
				{
					v = n - ((j*l1)+1);
					if (v<0)   v = dv;
				}
				else
				{
					v = n - ((j*l1)+2);
					v = v + ((j*l2)-1);
					if (v>255) v = dv;
				}
				
				if (v>=0 & v<=255)
				{
					//Log(s:"Sector_SetLight_Z (Color): (", d:sector, s:") (", d:n, s:" ", d:j, s:" ", d:v, s:" ", d:l1, s:" ", d:l2, s:")");
					return Sector_SetColor(sector, v, v, v, 0);
				}
				return 1;
			}
			
			if (n>200) n = 127;
			v = n;
			if (l2<=5)
			{
				if (v>0)
				{
					if (nonp==1) v = n - (j*l2);
					else         v = n - j;
				}
				if (v<0) v = n;
			}
			else
			{
				if (v<255)
				{
					if (nonp==1) v = n + (j*l2);
					else         v = n + j;
				}
				if (v>255) v = n;
			}
			
			//Log(s:"Sector_SetLight_Z (Light): (", d:sector, s:") (", d:n, s:" ", d:j, s:" ", d:v, s:" ", d:l2, s:")");
			return Light_ChangeToValue(sector, v);
		}
	}
	return 1;
}

script ACS_DLVL_MAIN OPEN
{
	int cnt = 0;
	if (is_enabled(0)==0)
	{
		terminate;
	}
	
	bring_down = 0;
	while (true)
	{
		Delay(5);
		
		if (bring_down==1)
		{
			process_running = 0;
			running = 0;
			terminate;
		}
		
		if (!PlayersPresent())
		{
			endsec = SECBREAK;
			continue;
		}
		
		if (cnt>=10) cnt = 0;
		//Log(s:"Begin (", d:cnt, s:")");
		if (process_running<=0)
		{
			Delay(2); // please keep it here
			//Log(s:"Last Sector: ", d:endsec);
			if (dark_set==0)
			{
				int n  = 0;
				int dl = set_darkness(0);
				int k  = 0;
				int rd = 0;
				int l  = 0;
				int l1 = 0;
				int bl = 0;
				gdl    = dl;
				if (process_running<1)
				{
					bring_down = 0;
					process_running = 1;
				}
				int cendsec;
				if (endsec!=SECBREAK)
				{
					cendsec = (endsec*SECMULT);
					if (cendsec>=SECBREAK)         cendsec = SECBREAK;
					else if (cendsec<DEFENDSECTOR) cendsec = DEFENDSECTOR;
				}
				else
					cendsec = SECBREAK;
				for (int i=0; i<=cendsec; i++)
				{
					l1 = 0;
					if (running<1)      running = 1;
					
					if (!PlayersPresent())
					{
						endsec = SECBREAK;
						//Log(s:"No players joined, endsec (", d:endsec, s:"). Breaking");
						running = 0;
					}
					
					if (n>10)           n  = 0;
					
					if (dl>128)         k  = dl+n;
					else                k  = dl-n;
					if (k<0)            k  = MIN_VAL;
					else if (k>MAX_VAL) k  = MAX_VAL;
					
					bl = GetSectorLightLevel(i);
					if (bl>=0) endsec = i;
					
					rd = GetCvar("sv_randdl");
						
					if (Sector_SetColor_Z(i, bl, k, k, k))
					{
						l1++;
					}
					if (Sector_SetLight_Z(i, bl, cnt, 0))
					{
						l1++;
					}
					Delay(1);
					if (l1>0)
					{
						if (rd == 0)          l   = RAND_UPD_INTV;
						if (l==RAND_UPD_INTV) gdl = dark_constraints(GetCvar("sv_dl"));
					}
					if (i>cendsec-1 || running==2 || process_running!=1 || gdl!=dl)
					{
						if (running==2)
							Log(s:"Breaking...");
						if (process_running==2)
						{
							Log(s:"Going down...");
						}
						if (i>cendsec-1)
						{
							//Log(s:"Last Sector End: ", d:i, s:" ", d:cendsec);
						}
						running = 0;
					}
					if (running==0)
						break;
					n++;
					if (rd==1)
					{
						if (l<RAND_UPD_INTV) l++;
						else                 l = 0;
					}
				}
				Delay(5);
				cnt++;
				if (gdl!=dl || process_running==2 || cendsec!=SECBREAK)
				{
					if (process_running==2)
					{
						process_running = 0;
						if (bring_down==1)
						{
							endsec = SECBREAK;
							terminate;
						}
					}
					if (GetCvar("sv_dl_mode")>=0)
					{
						Delay(2);
						dark_state(0);
						Delay(2);
						//Log(s:"Prepare to loop back (", d:cnt, s:") ", d:running, s:" ", d:process_running);
					}
					else
					{
						Log(s:"Last Sector Recorded: ", d:endsec);
						terminate;
					}
				}
			}
			process_running = 0;
		}
		else
		{
			dark_state(3);
			terminate;
		}
		
		//Log(s:"Restarting (", d:cnt, s:")");
	}
}

script ACS_DLBL_SET (int j)
{
	// Stop the previous cases.
	if (j<0 || j>3)
		terminate;
	dark_state(j);
	if (j==2 || j==3)
		bring_down = 1;
	else
		bring_down = 0;
}

int halt_run = 0;

script ACS_DLBL_SEC (int j)
{
	int cendsec, bl;
	
	if (halt_run==1)
		halt_run = 0;
	if (!PlayersPresent())
	{
		endsec = SECBREAK;
		terminate;
	}

	if (endsec!=SECBREAK)
	{
		cendsec = endsec;
		if (cendsec>=SECBREAK)         cendsec = SECBREAK;
		else if (cendsec<DEFENDSECTOR) cendsec = DEFENDSECTOR;
	}
	else
		cendsec = SECBREAK;
	for (int i=0; i<=cendsec; i++)
	{
		if (!PlayersPresent())
		{
			endsec = SECBREAK;
			//Log(s:"No players joined, endsec (", d:endsec, s:"). Breaking");
			break;
		}
					
		bl = GetSectorLightLevel(i);
		if (bl>=0) endsec = i;
					
		if (Sector_SetLight_Z(i, bl, j, 1))
		{
			//
		}
				
		Delay(1);
				
		if (i>cendsec-1)
		{
			//Log(s:"Last Sector End: ", d:i, s:" ", d:cendsec);
		}
		
		if (halt_run==2)
		{
			halt_run = 1;
			break;
		}
	}
	
	if (halt_run==1)
		halt_run = 0;
}

script ACS_DLBL_HALT (int j)
{
	if (j<0 || j>2)
		terminate;
	halt_run = j;
}
