
// This is the randomness factor. Having this in code results
// in overall better randomness - especially for rare items.
#define SEARCH_RANDOMNESSFACTOR 3

// This is how many different loot tables it is possible to define
#define SEARCH_MAXTABLE 10

// We allocate a shuffle bag array for each table. We also have two
// helper arrays: one stores max item index in each table and
// another one stores the pointer needed for shuffle bag algorithm.
#define SEARCH_MAXBAG 5000
str m_searchbag[SEARCH_MAXTABLE][SEARCH_MAXBAG];
int m_searchmaxitem[SEARCH_MAXTABLE];
int m_searchptr[SEARCH_MAXTABLE];

// Adds 'count' of 'lootid' elements to table 'tableid'.
function bool AddLoot(int tableid, int lootid, int count)
{
	if (tableid >= SEARCH_MAXTABLE || tableid < 0)
	{
		Log(s:"\ca[ERROR] AddLoot: bad tableid ",d:tableid);
		return false;
	}
	count *= SEARCH_RANDOMNESSFACTOR;
	int total = m_searchmaxitem[tableid];
	if (total + count > SEARCH_MAXBAG)
	{
		Log(s:"\ca[ERROR] AddLoot: shuffle bag capacity (",d:SEARCH_MAXBAG,s:") exceeded for table ",d:tableid);
		return false;
	}
	
	for (int i=total; i<total+count; i++)
		m_searchbag[tableid][i] = lootid;

	m_searchmaxitem[tableid] += count;
	m_searchptr[tableid] = m_searchmaxitem[tableid]-1;
	return true;
}

// This the core of shuffle bag algorithm. This function selects a loot item from
// the shuffle bag array, excludes it from the said array, and returns the item.
function int RetrieveLoot(int tableid)
{
	if (tableid >= SEARCH_MAXTABLE || tableid < 0)
	{
		Log(s:"\ca[ERROR] RetrieveLoot: bad tableid ",d:tableid);
		return -1;
	}
	if (m_searchmaxitem[tableid] == 0)
	{
		Log(s:"\ca[ERROR] RetrieveLoot: table ",d:tableid,s:" contains no loot items.");
		return -1;
	}
	
	int selection, result;
	// Is there only the last remaining item left in the shuffle bag array?
	if (m_searchptr[tableid] == 0)
	{
		// Yep. Let's return it and reset the pointer.
		result = m_searchbag[tableid][0];
		m_searchptr[tableid] = m_searchmaxitem[tableid]-1;
	}
	else
	{
		// Nope. In that case let's pick a random element from the array.
		selection = zd_rand(0, m_searchptr[tableid]);
		result = m_searchbag[tableid][selection];
		
		// Now let's swap it with the pointed elemented and decrement the pointer.
		m_searchbag[tableid][selection] = m_searchbag[tableid][m_searchptr[tableid]];
		m_searchbag[tableid][m_searchptr[tableid]] = result;
		m_searchptr[tableid]--;
	}
	return result;
}

// Define loot tables
#define LOOTTABLE_SMALL     0  // ammo, health
#define LOOTTABLE_MEDIUM    1  // coins, ammo, etc
#define LOOTTABLE_LARGE     2  // guns, ammo, armor, rare items.

// Also define loot "nothing"
#define LOOT_NOTHING        ""

script ACS_WRLD_DEFINELOOTTABLES OPEN
{
	Delay(3);
	// Set up the loot tables
    
    // ------------------------
    // -- [SMALL LOOT TABLE] --
    // ------------------------
    
	AddLoot(LOOTTABLE_SMALL, LOOT_NOTHING       ,  10);
    // Ammo
	AddLoot(LOOTTABLE_SMALL, "Clip"             ,  20);
	AddLoot(LOOTTABLE_SMALL, "Shell"            ,  15);
	AddLoot(LOOTTABLE_SMALL, "RocketAmmo"       ,  8);
	AddLoot(LOOTTABLE_SMALL, "Cell"             ,  4);
	AddLoot(LOOTTABLE_SMALL, "GoldWandAmmo"     ,  15);
	AddLoot(LOOTTABLE_SMALL, "PhoenixRodAmmo"   ,  15);
	AddLoot(LOOTTABLE_SMALL, "CrossbowAmmo"     ,  15);
    
    // Powerups
    AddLoot(LOOTTABLE_SMALL, "ArmorBonus"       ,  10);
    AddLoot(LOOTTABLE_SMALL, "HealthBonus"      ,  10);
    AddLoot(LOOTTABLE_SMALL, "Stimpack"         ,  8);
    AddLoot(LOOTTABLE_SMALL, "GreenArmor"       ,  1);
    AddLoot(LOOTTABLE_SMALL, "Berserk"          ,  2);
    AddLoot(LOOTTABLE_SMALL, "ArtiPoisonBag"    ,  8);
    AddLoot(LOOTTABLE_SMALL, "ArtiBlastRadius"  ,  2);
	
	// Troll
	AddLoot(LOOTTABLE_SMALL, "LostSoul"         ,  1);
    
    // Inventory
    if(GetCvar("sv_alwaysdropmoney") == 0) 
    {
        AddLoot(LOOTTABLE_SMALL, "BlasterAmmo"      ,  25); 
    }
    
 	AddLoot(LOOTTABLE_SMALL, "PuzzBook1"           ,  1);
 	AddLoot(LOOTTABLE_SMALL, "PuzzBook2"           ,  1);
	
	// Weapons
	AddLoot(LOOTTABLE_SMALL, "Shotgun"     		   ,  5);
    
    // ------------------------- 
    // -- [MEDIUM LOOT TABLE] --
    // ------------------------- 
    
	AddLoot(LOOTTABLE_MEDIUM, LOOT_NOTHING      ,  5); 
    // Ammo
	AddLoot(LOOTTABLE_MEDIUM, "Clip"            ,  5);
	AddLoot(LOOTTABLE_MEDIUM, "Shell"           ,  8);
	AddLoot(LOOTTABLE_MEDIUM, "RocketAmmo"      ,  10);
	AddLoot(LOOTTABLE_MEDIUM, "Cell"            ,  10);
	AddLoot(LOOTTABLE_MEDIUM, "CrossbowAmmo"    ,  10);
    
	AddLoot(LOOTTABLE_MEDIUM, "GoldWandAmmo"     ,  6);
	AddLoot(LOOTTABLE_MEDIUM, "PhoenixRodAmmo"   ,  10);
    
	AddLoot(LOOTTABLE_MEDIUM, "ClipBox"         ,  20);
	AddLoot(LOOTTABLE_MEDIUM, "ShellBox"        ,  20);
	AddLoot(LOOTTABLE_MEDIUM, "RocketBox"       ,  15);
	AddLoot(LOOTTABLE_MEDIUM, "CellPack"        ,  10);
    
	AddLoot(LOOTTABLE_MEDIUM, "GoldWandHefty"     ,  25);
	AddLoot(LOOTTABLE_MEDIUM, "PhoenixRodHefty"   ,  30);
    
    // Powerups
    AddLoot(LOOTTABLE_MEDIUM, "ArmorBonus"         ,  5);
    AddLoot(LOOTTABLE_MEDIUM, "HealthBonus"        ,  5);
    AddLoot(LOOTTABLE_MEDIUM, "Stimpack"           ,  15);
    AddLoot(LOOTTABLE_MEDIUM, "GreenArmor"         ,  5);
    AddLoot(LOOTTABLE_MEDIUM, "Berserk"            ,  5);
    AddLoot(LOOTTABLE_MEDIUM, "Soulsphere"         ,  1);
    AddLoot(LOOTTABLE_MEDIUM, "Allmap"             ,  1);
	AddLoot(LOOTTABLE_MEDIUM, "RadSuit" 		   ,  1);
	AddLoot(LOOTTABLE_MEDIUM, "ArtiTorch" 		   ,  1);
	AddLoot(LOOTTABLE_MEDIUM, "ArtiHealth" 		   ,  5);
	AddLoot(LOOTTABLE_MEDIUM, "ArtiSuperHealth"    ,  2);
    AddLoot(LOOTTABLE_MEDIUM, "ArtiInvisibility"   ,  10);
	AddLoot(LOOTTABLE_MEDIUM, "PuzzGemBlue1" 	   ,  1);
    AddLoot(LOOTTABLE_MEDIUM, "ArtiPoisonBag"      ,  10);
    AddLoot(LOOTTABLE_MEDIUM, "ArtiBlastRadius"    ,  5);
	AddLoot(LOOTTABLE_MEDIUM, "ArtiDarkServant"    ,  5);
    
    // Inventory
    if(GetCvar("sv_alwaysdropmoney") == 0) 
    {
        AddLoot(LOOTTABLE_MEDIUM, "BlasterAmmo"     ,  40);
        AddLoot(LOOTTABLE_MEDIUM, "BlasterHefty"    ,  35); 
    }
    
 	AddLoot(LOOTTABLE_MEDIUM, "PuzzGear1"        ,  1);
 	AddLoot(LOOTTABLE_MEDIUM, "PuzzGear2"        ,  1);
 	AddLoot(LOOTTABLE_MEDIUM, "PuzzGear3"        ,  1);
 	AddLoot(LOOTTABLE_MEDIUM, "PuzzGear4"        ,  1);    

 	AddLoot(LOOTTABLE_MEDIUM, "PuzzBook1"           ,  2);
 	AddLoot(LOOTTABLE_MEDIUM, "PuzzBook2"           ,  2);
 	AddLoot(LOOTTABLE_MEDIUM, "PuzzGemBig"          ,  2);
    
 	AddLoot(LOOTTABLE_MEDIUM, "PuzzSkull"           ,  1);
    
   	// Weapons
	AddLoot(LOOTTABLE_MEDIUM, "Shotgun"     		,  10);
	
    // ------------------------ 
    // -- [LARGE LOOT TABLE] --
    // ------------------------	
	AddLoot(LOOTTABLE_LARGE, LOOT_NOTHING       ,  2); 
    // Ammo   
	AddLoot(LOOTTABLE_LARGE, "ClipBox"          ,  20);
	AddLoot(LOOTTABLE_LARGE, "ShellBox"         ,  20);
	AddLoot(LOOTTABLE_LARGE, "RocketBox"        ,  20);
	AddLoot(LOOTTABLE_LARGE, "CellPack"         ,  20);
    
	AddLoot(LOOTTABLE_LARGE, "GoldWandHefty"     ,  8);
	AddLoot(LOOTTABLE_LARGE, "PhoenixRodHefty"   ,  8);
    
    // Powerups
    //AddLoot(LOOTTABLE_LARGE, "ArmorBonus"          ,  5);
    //AddLoot(LOOTTABLE_LARGE, "HealthBonus"         ,  5);
    AddLoot(LOOTTABLE_LARGE, "Stimpack"              ,  5);
    AddLoot(LOOTTABLE_LARGE, "GreenArmor"            ,  10);
    AddLoot(LOOTTABLE_LARGE, "Berserk"               ,  15);
    AddLoot(LOOTTABLE_LARGE, "Medikit"               ,  20);
    AddLoot(LOOTTABLE_LARGE, "BlueArmor"             ,  5);
    AddLoot(LOOTTABLE_LARGE, "Soulsphere"            ,  4);
    AddLoot(LOOTTABLE_LARGE, "Megasphere"            ,  1);
    AddLoot(LOOTTABLE_LARGE, "Allmap"                ,  4);
    AddLoot(LOOTTABLE_LARGE, "ArtiInvulnerability"   ,  1);
    AddLoot(LOOTTABLE_LARGE, "ArtiInvisibility"      ,  10);
	AddLoot(LOOTTABLE_LARGE, "RadSuit" 				 ,  5);
	AddLoot(LOOTTABLE_LARGE, "ArtiTorch" 		     ,  10);
	AddLoot(LOOTTABLE_LARGE, "ArtiHealth" 		     ,  15);
	AddLoot(LOOTTABLE_LARGE, "ArtiSuperHealth" 		 ,  5);
	AddLoot(LOOTTABLE_LARGE, "PuzzGemBlue1" 		 ,  2);
    AddLoot(LOOTTABLE_LARGE, "ArtiPoisonBag"         ,  8);
    AddLoot(LOOTTABLE_LARGE, "ArtiBlastRadius"       ,  8);
	AddLoot(LOOTTABLE_LARGE, "ArtiDarkServant"       ,  8);
	 
    // Inventory
    if(GetCvar("sv_alwaysdropmoney") == 0) 
    {
        AddLoot(LOOTTABLE_LARGE, "BlasterHefty"     ,  25);
        AddLoot(LOOTTABLE_LARGE, "BlasterAmmo"      ,  20);
    }
 	AddLoot(LOOTTABLE_LARGE, "PuzzBook1"       ,  8);
 	AddLoot(LOOTTABLE_LARGE, "PuzzBook2"       ,  8);
 	AddLoot(LOOTTABLE_LARGE, "PuzzGemBig"       ,  5);
 	AddLoot(LOOTTABLE_LARGE, "PuzzGear1"        ,  2);
 	AddLoot(LOOTTABLE_LARGE, "PuzzGear2"        ,  2);
 	AddLoot(LOOTTABLE_LARGE, "PuzzGear3"        ,  2);
 	AddLoot(LOOTTABLE_LARGE, "PuzzGear4"        ,  2);
 	AddLoot(LOOTTABLE_LARGE, "PuzzSkull"        ,  5);
 	AddLoot(LOOTTABLE_LARGE, "FWeaponPiece1"    ,  5);
 	AddLoot(LOOTTABLE_LARGE, "FWeaponPiece2"    ,  5);
 	AddLoot(LOOTTABLE_LARGE, "FWeaponPiece3"    ,  5);
 	AddLoot(LOOTTABLE_LARGE, "CWeaponPiece1"    ,  5);
 	AddLoot(LOOTTABLE_LARGE, "CWeaponPiece2"    ,  5);
 	AddLoot(LOOTTABLE_LARGE, "CWeaponPiece3"    ,  5);  
	
   	// Weapons
	AddLoot(LOOTTABLE_LARGE, "Railgun"     		,  10);
}

function void GrantLoot(str classname, int minval, int maxval, int tableid, str itemdesc)
{
	int amount = 0;
    
    if(minval != maxval)
        amount = zd_rand(minval, maxval);
    else
        amount = 1;
        
        if(GetCvar("sv_debugmode") > 0)
        {
            if (classname!="")
                Log(s:"\cd[DEBUG] GrantLoot: ",n:0, s:" dropped: ",s:classname,s:"!\n\cb(tableid: ",d:tableid, s:", amount: ",d:amount,s:", itemdesc: '",s:itemdesc,s:"')");
            else
                Log(s:"\cd[DEBUG] GrantLoot: ",n:0, s:" dropped: LOOT_NOTHING!\n\cb\()");
        }
        
        if(GetCvar("sv_alwaysdropmoney") > 0)
        {
            if(GetCvar("sv_debugmode") > 0)
                Log(s:"\cd[DEBUG] GrantLoot: (CVAR sv_alwaysdropmoney OVERRIDE) ",n:0, s:" dropped money!");
            
            if(tableid >= LOOTTABLE_SMALL && tableid < LOOTTABLE_LARGE)
                SpawnSpot ("BlasterAmmo", 0, 0, 0); 

            if(tableid > LOOTTABLE_MEDIUM && tableid < LOOTTABLE_LARGE+1)
                SpawnSpot ("BlasterHefty", 0, 0, 0); 
        }  
        
    if (classname!="")
    {                 
        for(int i = 0; i < amount; i++)
            SpawnSpot (classname, 0, 0, 0);
    }
}

// Upgrade buying function.
function void BuyChestUpgrade(int item, int player, int value, int cost)
{
	str msg = StrParam(n:player+1);    
	int slot = DataSlot(msg);

	// Player present in database?
	if (slot == -1)
	{
		Log(s:"[ERROR] ",s:msg,s:" wanted to buy on the shop but has no database ID!");
		return;
	}

	// Now fetch the item name.
	int itemName = GetItemDesc(item);
	
	if (value != Data[(DATASIZE*(slot+1))-CHESTUPGRADEDATA])
	{
		if (value < Data[(DATASIZE*(slot+1))-CHESTUPGRADEDATA])
		{
			HudMessage (s:"\ceYou already have a higher tier upgrade!";
			HUDMSG_FADEINOUT, CHNL_INTERACT2, NONE, 0.5, 0.55, 1.5, 0.3, 0.3);
			return;
		}
		else
		{
			Data[(DATASIZE*(slot+1))-CHESTUPGRADEDATA] = value;
		}
	}
	else
	{
		HudMessage (s:"\ceYou already have ",s:itemName,s:"!";
		HUDMSG_FADEINOUT, CHNL_INTERACT2, NONE, 0.5, 0.55, 1.5, 0.3, 0.3);
		return;	
	} 
	
	TakeMoney(player, cost);

	//print(s:"\cdYou bought ",s:GetItemDesc(item),s:".");
	SetFont("GARGWING");
	HudMessage (s:"\cdYou bought ",s:itemName,s:".";
		HUDMSG_FADEINOUT, CHNL_INTERACT2, NONE, 0.5, 0.55, 1.5, 0.3, 0.3);
}

// Get chest upgrade function.
function int GetChestUpgrade(int player)
{
	str msg = StrParam(n:player+1);    
	int slot = DataSlot(msg);

	// Player present in database?
	if (slot == -1)
	{
		Log(s:"[ERROR] ",s:msg,s:" wanted to access their chest upgrade has no database ID!");
		return -1;
	}
	
	int value = Data[(DATASIZE*(slot+1))-CHESTUPGRADEDATA];	
	return value;
}

