// [PET SCRIPTS SETTINGS]

#define MAX_VARIETY_PETS            20+1 //Because 0 means no pet.
#define PETTIDBASE                  11000

#define FOLLOW_TID 800
#define FOLLOW_SPEED 7.0    // fixed pixels per tick

str PossiblePets[MAX_VARIETY_PETS] = {"", 
"SerpentTorch", 
"FireBrazier", 
"SorcFX1", 
"Rock1", 
"Rock2", 
"Rock3", 
"", 
"",
"ExplosiveBarrel",
"ZChainBit64",
"StalagmiteSmall", //slenderman
"GoldWandFX2",
"ZChainBit32",
"DeadCacodemon",
"DeadMarine",
"DeadZombieMan",
"DeadDemon",
"DeadLostSoul",
"DeadDoomImp",
"DeadShotgunGuy"};

str PetActiveSounds[MAX_VARIETY_PETS] = {"", "", "", ""};
int PetSpawnHeight[MAX_VARIETY_PETS];

// [PET SCRIPTS]

/*
Actual piece of code that spawns the pet and then follow the player.
[$] Pretty old code could be done much cleaner.
*/

script ACS_PLYR_PETLOOP (void)
{
    int player = PlayerNumber();
    int oldX, oldY, oldZ;
    int dist, vang;
    int makesound = -1;

    // Loading data
    str msg = StrParam(n:PlayerNumber()+1);
    int slot = DataSlot(msg);
    int oldpet = Data[(DATASIZE*(slot+1))-PETDATA]; 
    int followspd;
    
    PetSpawnHeight[2] = 16;
    PetSpawnHeight[6] = 8;

    // check player slot within the database.
    if (slot != -1)
    {
        oldX = GetActorX(PlayerTag(player));
        oldY = GetActorY(PlayerTag(player));
        oldZ = GetActorZ(PlayerTag(player));
      
        While(Data[(DATASIZE*(slot+1))-PETDATA] == oldpet && PlayerAlive(player) && Data[(DATASIZE*(slot+1))-PETDATA] != 0 && !customGamemode)
        {
            dist = DistancePet(GetActorX(PlayerTag(player)), GetActorY(PlayerTag(player)), oldX, oldY);
            followspd = ((GetVelocity(PlayerTag(player)) >> 16) * 8 / 10) << 16;
            if(followspd < 7.0) followspd = 7.0;
            
            // There's no pet, spawn one..
            if(thingcount(0,player+PETTIDBASE) < 1)
            {
                if(PossiblePets[Data[(DATASIZE*(slot+1))-PETDATA]] != "") 
                    Spawn(PossiblePets[Data[(DATASIZE*(slot+1))-PETDATA]], oldX, oldY, GetActorZ(PlayerTag(player)) + PetSpawnHeight[Data[(DATASIZE*(slot+1))-PETDATA]]*65536, player+PETTIDBASE, 0); 
            }

            makesound = Random (0, 128);
     
            if (makesound == 10 && ThingCount(0, player+PETTIDBASE))
                ThingSound(player+PETTIDBASE, PetActiveSounds[Data[(DATASIZE*(slot+1))-PETDATA]], 127 -dist);
                
            if (dist > 500)
               break;
                
            
            // The player moved, update pet position.
            if (dist > 60 && ThingCount(0, player+PETTIDBASE))
            {  
                // Update the position.                   
                SetActorPosition(player+PETTIDBASE, oldX, oldY, oldZ + PetSpawnHeight[Data[(DATASIZE*(slot+1))-PETDATA]]*65536, 0);
    
                // Update actor angle.
                vang = VectorAngle (GetActorX (player+PETTIDBASE) - GetActorX (PlayerTag(player)), GetActorY (player+PETTIDBASE) - GetActorY (PlayerTag(player)));
                SetActorAngle (player+PETTIDBASE, vang -0.50);

        
                if (GetActorX(PlayerTag(player)) > oldX) oldX += followspd;
                if (GetActorX(PlayerTag(player)) < oldX) oldX -= followspd;
        
                if (GetActorY(PlayerTag(player)) > oldY) oldY += followspd;
                if (GetActorY(PlayerTag(player)) < oldY) oldY -= followspd;
            }
            
            // Update height outside of the distance check.
            if (GetActorZ(PlayerTag(player)) > oldZ) oldZ = GetActorZ(PlayerTag(player));
            if (GetActorZ(PlayerTag(player)) < oldZ) oldZ -= followspd;       
                
            Delay(1);
        }
    }
    
    if(ThingCount(0, player+PETTIDBASE)) 
        thing_remove(player+PETTIDBASE);
        
    delay(1);
    
    If(PlayerAlive(player))
        restart;
}

// Pet buying function.
function void BuyPet(int petNum, int player, int item, int cost)
{
    str msg = StrParam(n:player+1);
    
    int hasSlot = DataSlot(msg);

    if (hasSlot == -1)
    {
        Log(s:"[ERROR] ",s:msg,s:" wanted to buy on the shop but has no database ID!");
        return;
    }
    
    Data[(DATASIZE*(hasSlot+1))-PETDATA] = petNum;
    TakeMoney(player, cost);
    
    //print(s:"\cdYou bought ",s:GetItemDesc(item),s:".");
    SetFont("GARGWING");
    HudMessage (s:"\cdYou bought ",s:GetItemDesc(item),s:".";
                HUDMSG_FADEINOUT, CHNL_INTERACT2, NONE, 0.5, 0.55, 1.5, 0.3, 0.3);
}


