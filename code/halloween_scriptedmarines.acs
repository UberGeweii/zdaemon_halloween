

/*
#define MARINEHEALTHDATA	11
#define MARINESPEEDDATA		10
#define MARINEWEAPONDATA	9
#define MARINESKINDATA		8
#define MARINEDAMAGEDATA	7
#define MARINECOLORDATA		6
*/

script "DisplayMarineStatsOnMarines" enter
{
	int player = PlayerNumber();
	
	while (PlayerAlive(player))
	{
		for (int i = 0; i <= PlayerTopIndex(); i++)
		{
			if(PlayerAlive(i) && ThingCount(0, PLAYERMARINETIDBASE+i) > 0)
			{
				// Loading data
				str msg = StrParam(n:i+1);
				int slot = DataSlot(msg);
	
				// check player slot within the database.
				if (slot != -1)
				{					
					Client_NamedExecuteAlways(player, "DisplayMarineInfo", 0, i, Data[(DATASIZE*(slot+1))-MARINEHEALTHDATA], Data[(DATASIZE*(slot+1))-MARINEWEAPONDATA]);
				}
			}
		}
		
		Delay(1);
	}
}

script "DisplayMarineInfo" (int marine, int hpInfo, int wepInfo)
{
	str marineInfo = strparam(s:"\cd", n:marine+1, s:"'s Marine\n\cdHealth: \cj",d:GetActorProperty(PLAYERMARINETIDBASE+marine, APROP_Health), 
		s:" / ",d:hpInfo, s:"\n\cdWeapon: \cj", s:MarineWeapons[wepInfo]);
	
	HudMessageOnActor(PLAYERMARINETIDBASE+marine, 505+marine, 800, 600, 0, 0, 768, -1, "", 0, CR_WHITE, marineInfo);
}

script "LocalMarineCounter" (void)
{
	int player = PlayerNumber();
	int mTimer = 60;
	
	SetFont("GARGWING");
	
	while (ThingCount(0, PLAYERMARINETIDBASE+player) > 0)
	{
        HudMessage (s:"\cdMarine timer:  \cd", d:mTimer;
                    HUDMSG_PLAIN, CHNL_INVMTIMER, CR_BLACK, 0.95, 0.45, 1.0);
		mTimer--;
		Delay(1*35);
		
		if (mTimer <= 0)
			break;
		
	}
	HudMessage (s:"\crDespawning marine..";
		HUDMSG_PLAIN, CHNL_INVMTIMER, CR_BLACK, 0.95, 0.45, 1.0);
	Delay(1*35);
	Thing_Remove(PLAYERMARINETIDBASE+player);
	
}

script "PrintMarineData" (int player)
{
	// Loading data
	str msg = StrParam(n:PlayerNumber()+1);
	int slot = DataSlot(msg);

	// check player slot within the database.
	if (slot != -1)
	{
		Log(s:"=== Printing marine data ===");
		Log(s:"Player: ", d:player);
		Log(s:"Health: ", d:Data[(DATASIZE*(slot+1))-MARINEHEALTHDATA]);
		Log(s:"Speed: ", d:Data[(DATASIZE*(slot+1))-MARINESPEEDDATA]);
		Log(s:"Weapon: ", s:MarineWeapons[Data[(DATASIZE*(slot+1))-MARINEWEAPONDATA]]);
		Log(s:"Skin: ", s:ZD_GetSkinName(Data[(DATASIZE*(slot+1))-MARINESKINDATA]));
		Log(s:"Damage Multiplier: ", d:Data[(DATASIZE*(slot+1))-MARINEDAMAGEDATA]);
		Log(s:"Translation: ", d:Data[(DATASIZE*(slot+1))-MARINECOLORDATA]);
		Log(s:"============================");
	}
	else
	{
		Log(s:"PrintMarineData: Player does not exist in database!");
	}
}

script "SetMarineData" (int player, int dataType, int value)
{
	// Loading data
	str msg = StrParam(n:PlayerNumber()+1);
	int slot = DataSlot(msg);

	// check player slot within the database.
	if (slot != -1)
	{
		// Health.
		if (dataType == 0)
		{
			Data[(DATASIZE*(slot+1))-MARINEHEALTHDATA] = value;
		}
		else if (dataType == 1)
		{
			Data[(DATASIZE*(slot+1))-MARINESPEEDDATA] = value * 65536;	
		}
		else if (dataType == 2)
		{
			Data[(DATASIZE*(slot+1))-MARINEWEAPONDATA] = value;
		}
		else if (dataType == 3)
		{
			Data[(DATASIZE*(slot+1))-MARINESKINDATA] = value;
		}
		else if (dataType == 4)
		{
			Data[(DATASIZE*(slot+1))-MARINEDAMAGEDATA] = value * 65536;
		}
		else if (dataType == 5)
		{
			Data[(DATASIZE*(slot+1))-MARINECOLORDATA] = value;
		}
		else
		{
			Log(s:"SetMarineData: Invalid dataType provided!");
		}
	}
	else
	{
		Log(s:"SetMarineData: Player does not exist in database!");
	}
}

// Reroutes ArtiDarkServant functionality.
script "ArtifactRerouting" open
{
	Arti_Execute("ArtiDarkServant", 223);
}


// Spawns a scripted marine.
script 223 (void)
{
	int player = PlayerNumber();
	
	// Loading data
	str msg = StrParam(n:PlayerNumber()+1);
	int slot = DataSlot(msg);
	
	SetFont("GARGWING");

	// check player slot within the database.
	if (slot != -1)
	{
			
		if (!ThingCount(0, PLAYERMARINETIDBASE+player))
		{
			Print(s:"\cdSpawned your friendly marine.");
			
			Spawn("ScriptedMarine",
			GetActorX(PlayerTag(player)) + cos (GetActorAngle(PlayerTag(player))) * 96,
			GetActorY(PlayerTag(player)) + sin (GetActorAngle(PlayerTag(player))) * 96,
			GetActorFloorZ(PlayerTag(player)), PLAYERMARINETIDBASE+player, false);
			SetActorProperty(PLAYERMARINETIDBASE+player, APROP_Friendly, true);
			
			// Apply options bought by player.
				
			// Health.
			if (Data[(DATASIZE*(slot+1))-MARINEHEALTHDATA] <= 0)
				SetActorProperty(PLAYERMARINETIDBASE+player, APROP_Health, 100);
			else
				SetActorProperty(PLAYERMARINETIDBASE+player, APROP_Health, Data[(DATASIZE*(slot+1))-MARINEHEALTHDATA]);				
			
			// Speed.
			if (Data[(DATASIZE*(slot+1))-MARINESPEEDDATA] <= 0)
				SetActorProperty(PLAYERMARINETIDBASE+player, APROP_Speed, 2.0);
			else
				SetActorProperty(PLAYERMARINETIDBASE+player, APROP_Speed, Data[(DATASIZE*(slot+1))-MARINESPEEDDATA]);
			
			// Weapon.
			if (Data[(DATASIZE*(slot+1))-MARINEWEAPONDATA] <= 1)	
				SetMarineWeapon(PLAYERMARINETIDBASE+player, MARINEWEAPON_Fist);
			else
				SetMarineWeapon(PLAYERMARINETIDBASE+player, Data[(DATASIZE*(slot+1))-MARINEWEAPONDATA]);
			
			// Skin.
			ZD_SetMarineSkin(PLAYERMARINETIDBASE+player, ZD_GetSkinName(Data[(DATASIZE*(slot+1))-MARINESKINDATA]));
			
			// Damage multiplier.
			if (Data[(DATASIZE*(slot+1))-MARINEDAMAGEDATA] < 1.0)
				SetActorProperty(PLAYERMARINETIDBASE+player, APROP_DamageMultiplier, 1.0);	
			else
				SetActorProperty(PLAYERMARINETIDBASE+player, APROP_DamageMultiplier, Data[(DATASIZE*(slot+1))-MARINEDAMAGEDATA]);

			// Thing translation.
			Thing_SetTranslation(PLAYERMARINETIDBASE+player, Data[(DATASIZE*(slot+1))-MARINECOLORDATA]);
			
			// Activate the timer.
			ACS_NamedExecuteAlways("LocalMarineCounter", 0);

		}
		else
		{
			Print(s:"\caYour friendly marine is still alive!");
			GiveInventory("ArtiDarkServant", 1);
		}
	}
}

// Upgrade buying function.
function void BuyMarineUpgrade(int item, int player, int dataType, int value, int cost)
{
	str msg = StrParam(n:player+1);    
	int slot = DataSlot(msg);

	// Player present in database?
	if (slot == -1)
	{
		Log(s:"[ERROR] ",s:msg,s:" wanted to buy on the shop but has no database ID!");
		return;
	}

	// Now fetch the item name.
	int itemName = GetItemDesc(item);
	
	// Health.
	if (dataType == 0)
	{
		if (value != Data[(DATASIZE*(slot+1))-MARINEHEALTHDATA])
		{
			if (value < Data[(DATASIZE*(slot+1))-MARINEHEALTHDATA])
			{
				HudMessage (s:"\ceYou already have a higher tier upgrade!";
				HUDMSG_FADEINOUT, CHNL_INTERACT2, NONE, 0.5, 0.55, 1.5, 0.3, 0.3);
				return;
			}
			else
			{
				Data[(DATASIZE*(slot+1))-MARINEHEALTHDATA] = value;
			}
		}
		else
		{
			HudMessage (s:"\ceYou already have ",s:itemName,s:"!";
			HUDMSG_FADEINOUT, CHNL_INTERACT2, NONE, 0.5, 0.55, 1.5, 0.3, 0.3);
			return;	
		}
	}
	// Speed.
	else if (dataType == 1)
	{
		if ((value * 65536) != Data[(DATASIZE*(slot+1))-MARINESPEEDDATA])
		{
			if ((value * 65536) < Data[(DATASIZE*(slot+1))-MARINESPEEDDATA])
			{
				HudMessage (s:"\ceYou already have a higher tier upgrade!";
				HUDMSG_FADEINOUT, CHNL_INTERACT2, NONE, 0.5, 0.55, 1.5, 0.3, 0.3);
				return;
			}
			else
			{
				Data[(DATASIZE*(slot+1))-MARINESPEEDDATA] = value * 65536;
			}
		}		
		else
		{
			HudMessage (s:"\ceYou already have ",s:itemName,s:"!";
			HUDMSG_FADEINOUT, CHNL_INTERACT2, NONE, 0.5, 0.55, 1.5, 0.3, 0.3);
			return;	
		}
	}
	// Weapon.
	else if (dataType == 2)
	{
		if (value != Data[(DATASIZE*(slot+1))-MARINEWEAPONDATA])
		{
			Data[(DATASIZE*(slot+1))-MARINEWEAPONDATA] = value;
		}
		else
		{
			HudMessage (s:"\ceYou already have ",s:itemName,s:"!";
			HUDMSG_FADEINOUT, CHNL_INTERACT2, NONE, 0.5, 0.55, 1.5, 0.3, 0.3);
			return;	
		}
	}
	// Skin.
	else if (dataType == 3)
	{
		if (value != Data[(DATASIZE*(slot+1))-MARINESKINDATA])
		{
			Data[(DATASIZE*(slot+1))-MARINESKINDATA] = value;
		}
		else
		{
			HudMessage (s:"\ceYou already have ",s:itemName,s:"!";
			HUDMSG_FADEINOUT, CHNL_INTERACT2, NONE, 0.5, 0.55, 1.5, 0.3, 0.3);
			return;	
		}
	}
	// Damage multiplier.
	else if (dataType == 4)
	{
		if ((value * 65536) != Data[(DATASIZE*(slot+1))-MARINEDAMAGEDATA])
		{
			if ((value * 65536) < Data[(DATASIZE*(slot+1))-MARINEDAMAGEDATA])
			{
				HudMessage (s:"\ceYou already have a higher tier upgrade!";
				HUDMSG_FADEINOUT, CHNL_INTERACT2, NONE, 0.5, 0.55, 1.5, 0.3, 0.3);
				return;
			}
			else
			{
				Data[(DATASIZE*(slot+1))-MARINEDAMAGEDATA] = value * 65536;
			}
		}
		else
		{
			HudMessage (s:"\ceYou already have ",s:itemName,s:"!";
			HUDMSG_FADEINOUT, CHNL_INTERACT2, NONE, 0.5, 0.55, 1.5, 0.3, 0.3);
			return;	
		}
	}
	// Translation.
	else if (dataType == 5)
	{
		if (value != Data[(DATASIZE*(slot+1))-MARINECOLORDATA])
		{
			Data[(DATASIZE*(slot+1))-MARINECOLORDATA] = value;
		}
		else
		{
			HudMessage (s:"\ceYou already have ",s:itemName,s:"!";
			HUDMSG_FADEINOUT, CHNL_INTERACT2, NONE, 0.5, 0.55, 1.5, 0.3, 0.3);
			return;	
		}
	}
	else
	{
		Log(s:"SetMarineData: Invalid dataType provided!");
		return;
	}
	
	TakeMoney(player, cost);

	//print(s:"\cdYou bought ",s:GetItemDesc(item),s:".");
	SetFont("GARGWING");
	HudMessage (s:"\cdYou bought ",s:itemName,s:".";
		HUDMSG_FADEINOUT, CHNL_INTERACT2, NONE, 0.5, 0.55, 1.5, 0.3, 0.3);
}